import streamlit as st
import hashlib
import bcrypt
import time

st.set_page_config(page_title="Hash Sandbox üîê", page_icon="üîê", layout="centered")

st.title("üß© Hash Sandbox ‚Äî –ø–µ—Å–æ—á–Ω–∏—Ü–∞ —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏–π")
st.write("–ò–∑—É—á–∏—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: MD5, SHA, bcrypt –∏ –¥—Ä.")

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
text = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: password123")

algorithm = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º:",
    ["MD5", "SHA-1", "SHA-256", "SHA-512", "bcrypt"]
)

if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à"):
    if not text:
        st.warning("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è!")
    else:
        start_time = time.time()
        
        if algorithm == "MD5":
            result = hashlib.md5(text.encode()).hexdigest()
        elif algorithm == "SHA-1":
            result = hashlib.sha1(text.encode()).hexdigest()
        elif algorithm == "SHA-256":
            result = hashlib.sha256(text.encode()).hexdigest()
        elif algorithm == "SHA-512":
            result = hashlib.sha512(text.encode()).hexdigest()
        elif algorithm == "bcrypt":
            salt = bcrypt.gensalt()
            result = bcrypt.hashpw(text.encode(), salt).decode()

        elapsed = time.time() - start_time

        st.success("‚úÖ –•–µ—à —É—Å–ø–µ—à–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω!")
        st.code(result, language="text")

        st.write(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {elapsed:.6f} —Å–µ–∫")
        st.write(f"üî¢ –î–ª–∏–Ω–∞ —Ö–µ—à–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü–æ—è—Å–Ω–µ–Ω–∏–µ
        st.info({
            "MD5": "–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.",
            "SHA-1": "–¢–∞–∫–∂–µ —É—Å—Ç–∞—Ä–µ–ª, –≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–ª–ª–∏–∑–∏–∏.",
            "SHA-256": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–ª–æ–∫—á–µ–π–Ω–∞—Ö).",
            "SHA-512": "–î–ª–∏–Ω–Ω—ã–π —Ö–µ—à, –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
            "bcrypt": "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π."
        }[algorithm])

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π
st.divider()
st.subheader("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ö–µ—à–µ–π")

hash1 = st.text_input("–•–µ—à #1:")
hash2 = st.text_input("–•–µ—à #2:")

if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å"):
    if hash1 and hash2:
        if hash1.strip() == hash2.strip():
            st.success("‚úÖ –•–µ—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
        else:
            st.error("‚ùå –•–µ—à–∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è.")
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ —Ö–µ—à–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
